  function insertCode( code ) {
    console.log("i am in insertCode test");
		switch (code) {
      
      case "quick_sort":
        console.log("i am in quick_sort");
        $('#codeTA').val('void quickSortIterative (int arr[], int l, int h)\n'+ '{\n' + 'int stack[ h - l + 1 ];\n' + 'int top = -1;\n' + 'stack[ ++top ] = l;\n' + 'stack[ ++top ] = h;\n' + 'while ( top >= 0 )\n' + '{\n' + 'h = stack[ top-- ];\n' + 'l = stack[ top-- ];\n' + 'int p = partition( arr, l, h );\n' + 'if ( p-1 > l )\n' + '{\n' + 'stack[ ++top ] = l;\n' + 'stack[ ++top ] = p - 1;\n' + '}\n' + 'if ( p+1 < h )\n' + '{\n' + 'stack[ ++top ] = p + 1;\n' + 'stack[ ++top ] = h;\n' + ' }\n' + '}\n' + '}\n' + 'void printArr( int arr[], int n )\n' + '{\n' + 'int i;\n' + '  for ( i = 0; i < n; ++i )\n' + 'printf( \"%d \", arr[i] );\n' + '}\n' + 'int main()\n' + ' {\n' + 'int arr[] = {4, 3, 5, 2, 1, 3, 2, 3};\n' + '                    int n = sizeof( arr ) / sizeof( *arr );\n' + '                    quickSortIterative( arr, 0, n - 1 );\n' + '                    printArr( arr, n );\n' + 'return 0;\n' + '}'
);
      break;

      case "merge_sort":
        console.log("i am in merge_sort");
        $('#codeTA').val('#include <stdio.h>\n' + '            #include <math.h>\n' + '            int i,n,t,k;\n' + '            int a[100000],b[100000];\n' + '            int merge(l,r,u)\n' + '              int l,r,u;\n' + '            { int i,j,k;\n' + '              i=l; j=r; k=l;\n' + '              while (i<r && j<u) { \n' + '                if (a[i]<=a[j]) {b[k]=a[i]; i++;} \n' + '                else {b[k]=a[j]; j++;}\n' + '                k++;\n' + '              }\n' + '              while (i<r) { \n' + '                b[k]=a[i]; i++; k++;\n' + '              }\n' + '              while (j<u) { \n' + '                b[k]=a[j]; j++; k++;\n' + '              }\n' + '              for (k=l; k<u; k++) { \n' + '                a[k]=b[k]; \n' + '              }\n' + '            }\n' + '            sort()\n' + '            { int k,u;\n' + '              k=1;\n' + '              while (k<n) {\n' + '                i=1;\n' + '                while (i+k<=n) {\n' + '                  u=i+k*2;\n' + '                  if (u>n) u=n+1;\n' + '                  merge(i,i+k,u);\n' + '                  i=i+k*2;\n' + '                }\n' + '                k=k*2;\n' + '              }\n' + '            }\n' + '            main()\n' + '            { printf(\"input size \");\n' + '              scanf(\"%d\",&n); \n' + '            /*  for (i=1;i<=n;i++) scanf(\"%d\",&a[i]); */\n' + '              for (i=1;i<=n;i++) a[i]=random()%1000;\n' + '              t=clock();\n' + '              sort();\n' + '              for (i=1;i<=10;i++) printf(\"%d \",a[i]);\n' + '              printf("\");\n' + '              printf(\\"time= %d millisec\n' + '\\",(clock()-t)/1000);\n' + '            }'
        );
      break;
      
      case "heap_sort":
        console.log("i am in heap_sort");
        $('#codeTA').val( 
          '#include<stdio.h>\n' + '              void insert(int a[], int n, int item);\n' + '              int deleteheap(int a[],int n);\n' + '\n' + '              int main()\n' + '              {\n' + '                 int a[20],i,n,item;\n' + '                 printf(\" Enter number of elements in array : \");\n' + '                 scanf(\"%d\",&n);\n' + '                 for(i=0;i<n;i++)\n' + '                 {\n' + '                   printf(\" Enter number %d : \",i+1);\n' + '                   scanf(\"%d\",&a[i]);  \n' + '                 }\n' + '               \n' + '                 for(i=0;i<n;i++)\n' + '                 {\n' + '\n' + '                   item=a[i];\n' + '                   insert(a,i,item);\n' + '                 }\n' + '                 printf(" Heap is : \");\n' + '                 for(i=0;i<n;i++)\n' + '                 {\n' + '                   printf(\"%d \",a[i]);\n' + '                 }\n' + '\n' + '\n' + '                 for(i=n;i>=1;i--)\n' + '                 { \n' + '                   item=deleteheap(a,i);\n' + '                       \n' + '                   // Stores item=Maximum element in decreasing order of array length\n' + '                   a[i-1]=item;\n' + '                 }\n' + '\n' + '\n' + '                 printf(\" SORTED LIST IS!!!!\");\n' + '                 for(i=0;i<n;i++)\n' + '                 {\n' + '                   printf(\\" %d \\",a[i]);\n' + '                 }\n' + '               \n' + '               }\n' + '               \n' + '                // Used to Build Heap\n' + '                void insert(int a[], int n, int item)\n' + '                {\n' + '                   int ptr,par,temp;\n' + '               \n' + '                   ptr=n;\n' + '                   while(ptr>=1)\n' + '                   { \n' + '                     par=(ptr-1)/2;\n' + '               \n' + '                     if(a[par]>=item)\n' + '                     { \n' + '                       a[ptr]=item;\n' + '                       return;\n' + '                     }\n' + '                     else\n' + '                     {\n' + '                       a[ptr]=a[par];\n' + '                       ptr=par;\n' + '                     }\n' + '                  \n' + '                     a[ptr]=item;\n' + '                   }\n' + '               }\n' + '               \n' + '                /* Remove root which is the maximum element in Heap and rebuild heap \n' + '                   so that the next maximum element is at root. Rebuilding ensures \n' + '                   that our tree is in the form of heap.\n' + '                   Returns item = a[0] wcich contains the root of the heap.\n' + '                 */\n' + '                int deleteheap(int a[],int n)\n' + '                {\n' + '                  int i=0,item,temp;\n' + '                  \n' + '                  // a[0] - contains the root of the heap\n' + '                  item=a[0];\n' + '                  a[0]=a[n-1];\n' + '                  n=n-1;\n' + '                  while(((a[i]<a[2*i+1])||(a[i]<a[2*i+2]))&&((2*i+1)<n))\n' + '                  {\n' + '                    if(a[2*i+1]>a[2*i+2])\n' + '                    {\n' + '                      temp=a[i];\n' + '                      a[i]=a[2*i+1];\n' + '                      a[2*i+1]=temp;\n' + '                      i=2*i+1;\n' + '                    }\n' + '               \n' + '                    else\n' + '                    {\n' + '                      temp=a[i];\n' + '                      a[i]=a[2*i+2];\n' + '                      a[2*i+2]=temp;\n' + '                      i=2*i+2;\n' + '                    }\n' + '                  }\n' + '                  \n' + '                  // Root of the heap is returned\n' + '                  return item;\n' + '                }'
        );
      break;

      case "bubble_sort":
        console.log("i am in bubble_sort");
        $('#codeTA').val( 
              '#include <stdio.h>\n' + '                #include <math.h>\n' + '                  int a[10000];\n' + '                swap(i,j)\n' + '                int i,j;\n' + '                {int w;\n' + '                  w=a[i]; a[i]=a[j]; a[j]=w;\n' + '                }\n' + '                main()\n' + '                { int i,j,n,t;\n' + '                  printf(\"input size \n' + '\");\n' + '                  scanf(\"%d\",&n);\n' + '                  /*for (i=1;i<=n;i++) { scanf(\"%d\",&a[i]);};*/\n' + '                  for (i=1;i<=n;i++) a[i]=random()%1000;\n' + '                  t=clock();\n' + '                  for (i=n;i>=1;i--)\n' + '                    for (j=2;j<=i;j++)\n' + '                      if (a[j-1]>a[j])swap(j-1,j); /* swap a[j-1] and a[j] */ \n' + '                  for (i=1;i<=10;i++) { printf(\"%d \",a[i]);}\n' + '                  printf("time= %d millisec\n' + '\",(clock()-t)/1000);\n' + '                }'
        );
      break;

      case "binary_search":
        console.log("i am in binary_search");
        $('#codeTA').val( 
            '#include <stdio.h>\n' + '               \n' + '              int main()\n' + '              {\n' + '                 int c, first, last, middle, n, search, array[100];\n' + '               \n' + '                 printf(\"Enter number of elements\n' + '\");\n' + '                 scanf(\"%d\",&n);\n' + '               \n' + '                 printf(\"Enter %d integers\n' + '\", n);\n' + '               \n' + '                 for (c = 0; c < n; c++)\n' + '                    scanf(\"%d\",&array[c]);\n' + '               \n' + '                 printf(\"Enter value to find\n' + '\");\n' + '                 scanf(\"%d\", &search);\n' + '               \n' + '                 first = 0;\n' + '                 last = n - 1;\n' + '                 middle = (first+last)/2;\n' + '               \n' + '                 while (first <= last) {\n' + '                    if (array[middle] < search)\n' + '                       first = middle + 1;    \n' + '                    else if (array[middle] == search) {\n' + '                       printf(\"%d found at location %d.\n' + '\", search, middle+1);\n' + '                       break;\n' + '                    }\n' + '                    else\n' + '                       last = middle - 1;\n' + '               \n' + '                    middle = (first + last)/2;\n' + '                 }\n' + '                 if (first > last)\n' + '                    printf(\"Not found! %d is not present in the list.\n' + '\", search);\n' + '               \n' + '                 return 0;   \n' + '              }'
        );
      break;

      case "linear_search":
        console.log("i am in linear_search");
        $('#codeTA').val( 
            '#include <stdio.h>\n' + '                 \n' + '                int main()\n' + '                {\n' + '                   int array[100], search, c, n;\n' + '                 \n' + '                   printf(\"Enter the number of elements in array\n' + '\");\n' + '                   scanf(\"%d\",&n);\n' + '                 \n' + '                   printf(\"Enter %d integer(s)\n' + '\", n);\n' + '                 \n' + '                   for (c = 0; c < n; c++)\n' + '                      scanf(\"%d\", &array[c]);\n' + '                 \n' + '                   printf(\"Enter the number to search\n' + '\");\n' + '                   scanf(\"%d\", &search);\n' + '                 \n' + '                   for (c = 0; c < n; c++)\n' + '                   {\n' + '                      if (array[c] == search)     /* if required element found */\n' + '                      {\n' + '                         printf(\"%d is present at location %d.\n' + '\", search, c+1);\n' + '                         break;\n' + '                      }\n' + '                   }\n' + '                   if (c == n)\n' + '                      printf(\"%d is not present in array.\n' + '\", search);\n' + '                 \n' + '                   return 0;\n' + '                }'
        );
      break;

      case "selection_sort":
        console.log("i am in selection_sort");
        $('#codeTA').val( 
            '#include <stdio.h>\n' + '                 \n' + '                int main()\n' + '                {\n' + '                   int array[100], n, c, d, position, swap;\n' + '                 \n' + '                   printf(\"Enter number of elements\n' + '\");\n' + '                   scanf(\"%d\", &n);\n' + '                 \n' + '                   printf(\"Enter %d integers\n' + '\", n);\n' + '                 \n' + '                   for ( c = 0 ; c < n ; c++ )\n' + '                      scanf(\"%d\", &array[c]);\n' + '                 \n' + '                   for ( c = 0 ; c < ( n - 1 ) ; c++ )\n' + '                   {\n' + '                      position = c;\n' + '                 \n' + '                      for ( d = c + 1 ; d < n ; d++ )\n' + '                      {\n' + '                         if ( array[position] > array[d] )\n' + '                            position = d;\n' + '                      }\n' + '                      if ( position != c )\n' + '                      {\n' + '                         swap = array[c];\n' + '                         array[c] = array[position];\n' + '                         array[position] = swap;\n' + '                      }\n' + '                   }\n' + '                 \n' + '                   printf(\"Sorted list in ascending order:\n' + '\");\n' + '                 \n' + '                   for ( c = 0 ; c < n ; c++ )\n' + '                      printf(\"%d\n' + '\", array[c]);\n' + '                 \n' + '                   return 0;\n' + '                }'
        );
      break;

      case "generate_iterative_code":
        console.log("i am in generate_iterative_code");
        $('#codeTA').val( 
            '#include<stdio.h>\n' + '              #include<conio.h>\n' + '              #include<math.h>\n' + '              #define EPS 0.00005\n' + '              #define F(x) (x*x*x + 1)/2\n' + '              #define f(x)  x*x*x - 2*x + 1\n' + '\n' + '              int n;\n' + '\n' + '              void iter();\n' + '\n' + '              void main()\n' + '              {\n' + '              clrscr();\n' + '              printf(" Solution by ITERATION METHOD \");\n' + '              printf("\n' + ' Equation is -> x*x*x - 2*x + 1 = 0\n' + '\");\n' + '              printf(" Enter the no. of iterations \");\n' + '              scanf(\"%d\",&n);\n' + '              iter();\n' + '              getch();\n' + '              }\n' + '\n' + '              void iter()\n' + '               {\n' + '               int i=0;\n' + '               float x1,x2,x0;\n' + '               float f1,f2,f0,error;\n' + '               for(x1=1; ;x1++)\n' + '                  {\n' + '                  f1=f(x1);\n' + '                  if(f1>0)\n' + '                    break;\n' + '                  }\n' + '               for(x0=x1-1; ;x0--)\n' + '                  {\n' + '                  f0=f(x0);\n' + '                  if(f0<0)\n' + '                    break;\n' + '                  }\n' + '               x2=(x0+x1)/2;\n' + '               printf("\n' + '    The 1 approximatrion to the root is : %f\",x2);\n' + '               for(;i<n-1;i++)\n' + '                  {\n' + '                  f2=F(x2);\n' + '                  printf("\n' + '    The %d approximatrion to the root is : %f\",i+2,f2);\n' + '                  x2=F(x2);\n' + '                  error=fabs(f2-f1);\n' + '                  if(error<EPS)\n' + '                     break;\n' + '                  f1=f2;\n' + '                  }\n' + '               if(error>EPS)\n' + '                 printf("\n' + '  NOTE :- The no. of iterations are not sufficient.\");\n' + '               printf(\"     ROOT  = %.4f (Correct to 4 Decimal places)\\",f2);\n' + '}'
        );
      break;

      default:
        console.log ("Ends Here, Enter Code Manually in text area");
      break;

    }
	}