  function insertCode( code ) {
    console.log("i am in insertCode test");
		switch (code) {
      
      case "quick_sort":
        console.log("i am in quick_sort");
        $('#codeTA').val( 'void quickSortIterative (int arr[], int l, int h)' + '{' + 'int stack[ h - l + 1 ];' + 'int top = -1;' + 'stack[ ++top ] = l;' + 'stack[ ++top ] = h;' + 'while ( top >= 0 )' + '{' + 'h = stack[ top-- ];' + 'l = stack[ top-- ];' + 'int p = partition( arr, l, h );' + 'if ( p-1 > l )' + '{' + 'stack[ ++top ] = l;' + 'stack[ ++top ] = p - 1;' + '}' + 'if ( p+1 < h )'+'{'+'stack[ ++top ] = p + 1;'+'stack[ ++top ] = h;'+' }'+'}'+'}'+'void printArr( int arr[], int n )'+'{'+'int i;'+'  for ( i = 0; i < n; ++i )'+'printf( \"%d \", arr[i] );'+'}' + 'int main()'+' {'+'int arr[] = {4, 3, 5, 2, 1, 3, 2, 3};'+'                    int n = sizeof( arr ) / sizeof( *arr );'+'                    quickSortIterative( arr, 0, n - 1 );'+'                    printArr( arr, n );' + 'return 0;' + '}'
        );
      break;

      case "merge_sort":
        console.log("i am in merge_sort");
        $('#codeTA').val('#include <stdio.h>'+'            #include <math.h>'+'            int i,n,t,k;'+'            int a[100000],b[100000];'+'            int merge(l,r,u)'+'              int l,r,u;'+'            { int i,j,k;'+'              i=l; j=r; k=l;'+'              while (i<r && j<u) { '+'                if (a[i]<=a[j]) {b[k]=a[i]; i++;} '+'                else {b[k]=a[j]; j++;}'+'                k++;'+'              }'+'              while (i<r) { '+'                b[k]=a[i]; i++; k++;'+'              }'+'              while (j<u) { '+'                b[k]=a[j]; j++; k++;'+'              }'+'              for (k=l; k<u; k++) { '+'                a[k]=b[k]; '+'              }'+'            }'+'            sort()'+'            { int k,u;'+'              k=1;'+'              while (k<n) {'+'                i=1;'+'                while (i+k<=n) {'+'                  u=i+k*2;'+'                  if (u>n) u=n+1;'+'                  merge(i,i+k,u);'+'                  i=i+k*2;'+'                }'+'                k=k*2;'+'              }'+'            }'+'            main()'+'            { printf(\"input size '+'\");'+'              scanf(\"%d\",&n); '+'            /*  for (i=1;i<=n;i++) scanf(\"%d\",&a[i]); */'+'              for (i=1;i<=n;i++) a[i]=random()%1000;'+'              t=clock();'+'              sort();'+'              for (i=1;i<=10;i++) printf(\"%d \",a[i]);'+'              printf(\"'+'\");'+'              printf(\\"time= %d millisec'+'\\",(clock()-t)/1000);'+'            }'
        );
      break;
      
      case "heap_sort":
        console.log("i am in heap_sort");
        $('#codeTA').val( 
          '#include<stdio.h>'+'              void insert(int a[], int n, int item);'+'              int deleteheap(int a[],int n);'+''+'              int main()'+'              {'+'                 int a[20],i,n,item;'+'                 printf(\" Enter number of elements in array : \");'+'                 scanf(\"%d\",&n);'+'                 for(i=0;i<n;i++)'+'                 {'+'                   printf(\" Enter number %d : \",i+1);'+'                   scanf(\"%d\",&a[i]);  '+'                 }'+'               '+'                 for(i=0;i<n;i++)'+'                 {'+''+'                   item=a[i];'+'                   insert(a,i,item);'+'                 }'+'                 printf(\"'+' Heap is : \");'+'                 for(i=0;i<n;i++)'+'                 {'+'                   printf(\"%d \",a[i]);'+'                 }'+''+''+'                 for(i=n;i>=1;i--)'+'                 { '+'                   item=deleteheap(a,i);'+'                       '+'                   // Stores item=Maximum element in decreasing order of array length'+'                   a[i-1]=item;'+'                 }'+''+''+'                 printf(\\"'+' SORTED LIST IS!!!!'+'\\");'+'                 for(i=0;i<n;i++)'+'                 {'+'                   printf(\\" %d \\",a[i]);'+'                 }'+'               '+'               }'+'               '+'                // Used to Build Heap'+'                void insert(int a[], int n, int item)'+'                {'+'                   int ptr,par,temp;'+'               '+'                   ptr=n;'+'                   while(ptr>=1)'+'                   { '+'                     par=(ptr-1)/2;'+'               '+'                     if(a[par]>=item)'+'                     { '+'                       a[ptr]=item;'+'                       return;'+'                     }'+'                     else'+'                     {'+'                       a[ptr]=a[par];'+'                       ptr=par;'+'                     }'+'                  '+'                     a[ptr]=item;'+'                   }'+'               }'+'               '+'                /* Remove root which is the maximum element in Heap and rebuild heap '+'                   so that the next maximum element is at root. Rebuilding ensures '+'                   that our tree is in the form of heap.'+'                   Returns item = a[0] wcich contains the root of the heap.'+'                 */'+'                int deleteheap(int a[],int n)'+'                {'+'                  int i=0,item,temp;'+'                  '+'                  // a[0] - contains the root of the heap'+'                  item=a[0];'+'                  a[0]=a[n-1];'+'                  n=n-1;'+'                  while(((a[i]<a[2*i+1])||(a[i]<a[2*i+2]))&&((2*i+1)<n))'+'                  {'+'                    if(a[2*i+1]>a[2*i+2])'+'                    {'+'                      temp=a[i];'+'                      a[i]=a[2*i+1];'+'                      a[2*i+1]=temp;'+'                      i=2*i+1;'+'                    }'+'               '+'                    else'+'                    {'+'                      temp=a[i];'+'                      a[i]=a[2*i+2];'+'                      a[2*i+2]=temp;'+'                      i=2*i+2;'+'                    }'+'                  }'+'                  '+'                  // Root of the heap is returned'+'                  return item;'+'                }'
        );
      break;

      case "bubble_sort":
        console.log("i am in bubble_sort");
        $('#codeTA').val( 
              '#include <stdio.h>'+'                #include <math.h>'+'                  int a[10000];'+'                swap(i,j)'+'                int i,j;'+'                {int w;'+'                  w=a[i]; a[i]=a[j]; a[j]=w;'+'                }'+'                main()'+'                { int i,j,n,t;'+'                  printf(\"input size '+'\");'+'                  scanf(\"%d\",&n);'+'                  /*for (i=1;i<=n;i++) { scanf(\"%d\",&a[i]);};*/'+'                  for (i=1;i<=n;i++) a[i]=random()%1000;'+'                  t=clock();'+'                  for (i=n;i>=1;i--)'+'                    for (j=2;j<=i;j++)'+'                      if (a[j-1]>a[j])swap(j-1,j); /* swap a[j-1] and a[j] */ '+'                  for (i=1;i<=10;i++) { printf(\"%d \",a[i]);}'+'                  printf(\"'+'time= %d millisec'+'\",(clock()-t)/1000);'+'                }'
        );
      break;

      case "binary_search":
        console.log("i am in binary_search");
        $('#codeTA').val( 
            '#include <stdio.h>'+'               '+'              int main()'+'              {'+'                 int c, first, last, middle, n, search, array[100];'+'               '+'                 printf(\"Enter number of elements'+'\");'+'                 scanf(\"%d\",&n);'+'               '+'                 printf(\"Enter %d integers'+'\", n);'+'               '+'                 for (c = 0; c < n; c++)'+'                    scanf(\"%d\",&array[c]);'+'               '+'                 printf(\"Enter value to find'+'\");'+'                 scanf(\"%d\", &search);'+'               '+'                 first = 0;'+'                 last = n - 1;'+'                 middle = (first+last)/2;'+'               '+'                 while (first <= last) {'+'                    if (array[middle] < search)'+'                       first = middle + 1;    '+'                    else if (array[middle] == search) {'+'                       printf(\"%d found at location %d.'+'\", search, middle+1);'+'                       break;'+'                    }'+'                    else'+'                       last = middle - 1;'+'               '+'                    middle = (first + last)/2;'+'                 }'+'                 if (first > last)'+'                    printf(\"Not found! %d is not present in the list.'+'\", search);'+'               '+'                 return 0;   '+'              }'
        );
      break;

      case "linear_search":
        console.log("i am in linear_search");
        $('#codeTA').val( 
            '#include <stdio.h>'+'                 '+'                int main()'+'                {'+'                   int array[100], search, c, n;'+'                 '+'                   printf(\"Enter the number of elements in array'+'\");'+'                   scanf(\"%d\",&n);'+'                 '+'                   printf(\"Enter %d integer(s)'+'\", n);'+'                 '+'                   for (c = 0; c < n; c++)'+'                      scanf(\"%d\", &array[c]);'+'                 '+'                   printf(\"Enter the number to search'+'\");'+'                   scanf(\"%d\", &search);'+'                 '+'                   for (c = 0; c < n; c++)'+'                   {'+'                      if (array[c] == search)     /* if required element found */'+'                      {'+'                         printf(\"%d is present at location %d.'+'\", search, c+1);'+'                         break;'+'                      }'+'                   }'+'                   if (c == n)'+'                      printf(\"%d is not present in array.'+'\", search);'+'                 '+'                   return 0;'+'                }'
        );
      break;

      case "selection_sort":
        console.log("i am in selection_sort");
        $('#codeTA').val( 
            '#include <stdio.h>'+'                 '+'                int main()'+'                {'+'                   int array[100], n, c, d, position, swap;'+'                 '+'                   printf(\"Enter number of elements'+'\");'+'                   scanf(\"%d\", &n);'+'                 '+'                   printf(\"Enter %d integers'+'\", n);'+'                 '+'                   for ( c = 0 ; c < n ; c++ )'+'                      scanf(\"%d\", &array[c]);'+'                 '+'                   for ( c = 0 ; c < ( n - 1 ) ; c++ )'+'                   {'+'                      position = c;'+'                 '+'                      for ( d = c + 1 ; d < n ; d++ )'+'                      {'+'                         if ( array[position] > array[d] )'+'                            position = d;'+'                      }'+'                      if ( position != c )'+'                      {'+'                         swap = array[c];'+'                         array[c] = array[position];'+'                         array[position] = swap;'+'                      }'+'                   }'+'                 '+'                   printf(\"Sorted list in ascending order:'+'\");'+'                 '+'                   for ( c = 0 ; c < n ; c++ )'+'                      printf(\"%d'+'\", array[c]);'+'                 '+'                   return 0;'+'                }'
        );
      break;

      case "generate_iterative_code":
        console.log("i am in generate_iterative_code");
        $('#codeTA').val( 
            '#include<stdio.h>'+'              #include<conio.h>'+'              #include<math.h>'+'              #define EPS 0.00005'+'              #define F(x) (x*x*x + 1)/2'+'              #define f(x)  x*x*x - 2*x + 1'+''+'              int n;'+''+'              void iter();'+''+'              void main()'+'              {'+'              clrscr();'+'              printf(\"'+' Solution by ITERATION METHOD \");'+'              printf(\"'+''+' Equation is -> x*x*x - 2*x + 1 = 0'+'\");'+'              printf(\"'+' Enter the no. of iterations \");'+'              scanf(\"%d\",&n);'+'              iter();'+'              getch();'+'              }'+''+'              void iter()'+'               {'+'               int i=0;'+'               float x1,x2,x0;'+'               float f1,f2,f0,error;'+'               for(x1=1; ;x1++)'+'                  {'+'                  f1=f(x1);'+'                  if(f1>0)'+'                    break;'+'                  }'+'               for(x0=x1-1; ;x0--)'+'                  {'+'                  f0=f(x0);'+'                  if(f0<0)'+'                    break;'+'                  }'+'               x2=(x0+x1)/2;'+'               printf(\"'+''+'    The 1 approximatrion to the root is : %f\",x2);'+'               for(;i<n-1;i++)'+'                  {'+'                  f2=F(x2);'+'                  printf(\"'+''+'    The %d approximatrion to the root is : %f\",i+2,f2);'+'                  x2=F(x2);'+'                  error=fabs(f2-f1);'+'                  if(error<EPS)'+'                     break;'+'                  f1=f2;'+'                  }'+'               if(error>EPS)'+'                 printf(\"'+''+'  NOTE :- The no. of iterations are not sufficient.\");'+'               printf(\\"'+'     ROOT  = %.4f (Correct to 4 Decimal places)\\",f2);'+'}'
        );
      break;

      default:
        console.log ("Ends Here, Enter Code Manually in text area");
      break;

    }
	}